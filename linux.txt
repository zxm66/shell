linux 系统进阶路线图

linux下软件包的管理
	yum
	apt
	yarn
	yay
	pacman

linux服务器基本配置
网络配置
	tcp/ip协议四层模型
		应用层
		传输层
		网络层
		链路层
	路由表

	抓包工具
		图形化抓包工具Wireshark
		tcpdump

linux下的系统服务
	ssh 远程管理
	rsync 工具
	ftp 文件共享
	DNS 域名解析
	源码构建LAMP
	rsylog系统日志


linux下的磁盘管理
	分区方案 
	逻辑卷管理磁盘方式
	raid阵列

shell编程
	了解shell中的通配符
	熟悉grep，cut ，sort小工具的使用
	一、grep工具
		grep是行过滤工具，用于根据关键字进行过滤
		alias grep = 'grep --color=auto' 颜色自由显示
		grep -n 'keyword' file  -n  行号
		grep -i 'keyword' file  -i  不区分大小写
		grep -v 'keyword' file  -v
		-A  显示后几行
		-B  显示前几行
		-e 使用正则表达式
	二、cut列截取工具，用于列的截取
		
		如何查看系统的运行级别
		runlevel
		cat /etc/inittab

		如何过滤？
	三、sort 排序
	四、uniq 去重
	五、tee工具是从标准输入 输入到 标准输出
	六、diff
	七、paste 合并文件
	八、tr工具 搜索替换
		tr '0-9' '@' < 1.txt
		tr ' ,\' '#' < 1.txt 
		tr 替换的是字符的。
	
	Bash特性
	通配符
	*  匹配0或多个任意字符
	？ 匹配任意单个字符
	[list] 匹配[list]中任意单个字符，或者一组打个字符
	[!list] 匹配list中的任意单个字符
	{string1,string2} 匹配string1，string2或更多字符串
	bash中的引号
	""
	''
	`` = $()
	
	shell编程
	语法结构
		变量定义
		条件判断
		循环语句
		分支语句
		函数
		数组
	基本正则表达式的应用
	文件处理三剑客
		grep
		sed
		awk
	使用shell脚本完成一些较复的任务，服务搭建，批量处理


	编译型语言
	解释型语言

	shell 介于内核和用户之间的负责命令的解释

	终端和shell的关系：
		打开是终端，默认打开一个shell。终端是一个程序，提供了一个窗口。
	
	若干命令+脚本基本格式+脚本特定语法+思想=shell脚本
	
	什么时候用到脚本？
		重复化，复杂化的工作，通过把工作的命令写成脚本，以后仅仅需要执行脚本就能完成这些工作。
	shell脚本能干什么？
		自动化软件部署
		自动化管理
		自动化分析处理
		自动化备份
		自动化监控脚本
	如何学习shell脚本？
		尽可能记忆更多的命令
		掌握脚本的标准格式
		必须熟练掌握脚本的基本语法。
	学习最简单的东西，还是一个原则，给出基本问题的解决方案。

	变量：
		变量名区分大小写（建议使用大写）
		变量名不能包含特殊符号;
		变量名不能以数字开头
		等号两边不能有空格
		变量名尽量做到见名知意
		变量名尽量使用大写
	$变量名 与 ${变量名}的区别？
		A=hello
		$A
		${A:2:3} 切片

	交互式定义变量
	read [选项] 变量名

	read name
	read -p "Input your name :" name

	定义有类型的变量（declare）

	declare -i A=123
	declare -r B=Hello
	-i int
	-r readOnly

	脚本名称
	脚本内容
	脚本解释器 #!/bin/env
	注释说明
	程序本身
		命令
		语法
		思想
	完成任务

	标准执行方式
		脚本必须有可执行权限
		绝对路径或者相对路径
	非标准执行
		解释器 脚本文件
		bash 
		source
	变量的分类
		本地变量
			当前用户自定义的变量，当前进程有效的变量,其他进程或者当前进程的子进程无效
		环境变量
			当前进程有效，子进程有效
			可以使用env查看当前用户的环境变量
			
		全局变量
			所有的用户和程序都能调用，且继承，新建的用户也默认能调用
			解读相关配置文件
			$HOME/.bashrc
			$HOME/.bash_profile
			$HOME/.bash_logout

			/etc/bashrc
			/etc/profile

		系统变量（内置的bash中的变量）：shell本身已经固定好的它的名字和作用
		$?	上一条指令的状态值
		$0  当前执行的程序或者脚本名
		$#  脚本后边接的参数个数
		$*  脚本后边所有参数，阐述当成一个整体输出，每一个变量参数之间以空格隔开
		$@  脚本后面所有参数，参数是独立的，也是全部输出
		$1-$9 脚本后边的位置参数，$1表示第一个位置，依次类推
		${10}-${n} 扩展位置参数，第10个位置变量必须用{}括起来
		$$  当前所在进程的进程号，
		$! 当前终端后台运行的最后一个进程号
		!$ 调用最后一条命令历史中的参数

	四则运算
	$((1+1))
	$[1+1]
	expr 1 + 1
	let n=n+1

	unset 去掉一个变量

	条件判断语句结构
		思考：何为真（true）？何为假（false）？
		1.条件判断语法格式
			test 条件表达式
			[条件表达式]
			[[条件表达式]]支持正则=～
		特别说明：
			[ 两边必须有空格 ]
			[[ 两边必须有空格 ]]
		更多判断 man test去查看，很多参数都是用来进行条件判断

	条件判断相关参数
		判断文件类型，字符串相等，权限
		
		-e 判断文件是否存在（任何文件类型）
		-f 判断文件是否存在并且是一个普通文件

		判断整数
		判断字符串
		
		多重条件判断
		-a 和 &&
		-o 和 ||
		; 只用于分割命令表达式

		逻辑运算符总结
		语法结构 test express

		条件判断
		-d 目录
		-L
		-e
		-w 可写
		-eq 相等
		-ef 判断文件是否是同一个文件
		-n
		-z
		看man test 

		基本语法结构
		if 结构
			if [ condition ]; then
				command
			fi
		if else 结构
			if [ condition ]; then
					command
				else
					command
			fi
		if elif else 结构
			if [ condition ]; then
				command
			elif [ condition]; then
				command
			else
				command
			fi
	
		

		
		
		
mysqlDBA实战
		
